dnl Process this file with autoconf to produce a configure script.

# get rid of that stupid cache mechanism
rm -f config.cache

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(emage, 0.0.1)
AM_CONFIG_HEADER(src/lib/config.h)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_C_CONST
AM_ENABLE_SHARED
AM_PROG_LIBTOOL

AM_WITH_DMALLOC

dnl Add the languages which your application supports here.
ALL_LINGUAS=""

dnl Set PACKAGE_LOCALE_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/${DATADIRNAME}/locale", [Locale-specific data directory])
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale", [Locale-specific data directory])
fi

dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}", [PACKAGE_DATA_DIR])
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}", [PACKAGE_DATA_DIR])
fi

dnl Set PACKAGE_BIN_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/bin'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${ac_default_prefix}/bin", [Installation directory for user executables])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${prefix}/bin", [Installation directory for user executables])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${bindir}", [Installation directory for user executables])
fi

dnl Set PACKAGE_LIB_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/lib'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${ac_default_prefix}/lib", [Installation directory for libraries])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${prefix}/lib", [Installation directory for libraries])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${libdir}", [Installation directory for libraries])
fi

dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}", [Source code directory])

#####################################################################
## Cpu based optimizations

#######################################
## PTHREADS
#pthread_cflags=""
#pthread_libs=""
#build_pthreads="no"
# sched_getaffinity pthread_attr_setaffinity_np
#AC_CHECK_HEADER(pthread.h,
#  [ 
#    AC_CHECK_HEADER(sched.h,
#      [ 
#        AC_CHECK_LIB(pthread, pthread_attr_setaffinity_np, 
#	  [
#            AC_CHECK_LIB(pthread, pthread_barrier_wait, 
#  	      [ build_pthreads="yes" ],
#              [ build_pthreads="no" ]
#            )
#	  ],
#          [ build_pthreads="no" ]
#        )
#      ],
#      [ build_pthreads="no" ]
#    )
#  ],
#  [ build_pthreads="no" ]
#)
### disable pthreads by default for now - some wierd deadlock issue with
# barriers (makes no sense)
#build_pthreads="no"
AC_MSG_CHECKING(whether to build pthread code)
AC_ARG_ENABLE(pthreads, 
  [  --enable-pthreads               enable threaded rendering], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_PTHREAD, 1, [Build Threaded Rendering])
        build_pthreads="yes"
        pthread_cflags=""
        pthread_libs="-lpthread"
      else
        AC_MSG_RESULT(no)
        build_pthreads="no"
      fi
  ],
  [ 
    AC_MSG_RESULT($build_pthreads)
    if test x"$build_pthreads" = x"yes" ; then
      AC_DEFINE(BUILD_PTHREAD, 1, [Build Threaded Rendering])
      pthread_cflags=""
      pthread_libs="-lpthread"
    fi
  ]
)

#######################################
## MMX
build_cpu_mmx="no"
case $host_cpu in
  i*86)
    build_cpu_mmx="yes"
    ;;
  x86_64)
    build_cpu_mmx="yes"
    ;;
esac
AC_MSG_CHECKING(whether to build mmx code)
AC_ARG_ENABLE(cpu-mmx, 
  [  --enable-cpu-mmx                enable mmx code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_MMX, 1, [Build MMX Code])
        build_cpu_mmx="yes"
      else
        AC_MSG_RESULT(no)
        build_cpu_mmx="no"
      fi
  ],
  [
    AC_MSG_RESULT($build_cpu_mmx)
    if test x"$build_cpu_mmx" = x"yes" ; then
      AC_DEFINE(BUILD_MMX, 1, [Build MMX Code])
    fi
  ]
)

#######################################
## SSE
build_cpu_sse="no"
case $host_cpu in
  i*86)
    build_cpu_sse="yes"
    ;;
  x86_64)
    build_cpu_sse="yes"
    ;;
esac
AC_MSG_CHECKING(whether to build sse code)
AC_ARG_ENABLE(cpu-sse, 
  [  --enable-cpu-sse                enable sse code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_SSE, 1, [Build SSE Code])
        build_cpu_sse="yes"
      else
        AC_MSG_RESULT(no)
        build_cpu_sse="no"
      fi
  ],
  [ 
    AC_MSG_RESULT($build_cpu_sse)
    if test x"$build_cpu_sse" = x"yes" ; then
      AC_DEFINE(BUILD_SSE, 1, [Build SSE Code])
    fi
  ]
)

#######################################
## ALTIVEC
build_cpu_altivec="no"
case $host_cpu in
  *power* | *ppc*)
    build_cpu_altivec="yes"
    ;;
esac
altivec_cflags=""
AC_MSG_CHECKING(whether to build altivec code)
AC_ARG_ENABLE(cpu-altivec, 
  [  --enable-cpu-altivec            enable altivec code], [
     build_cpu_altivec=$enableval
  ]
)
AC_MSG_RESULT($build_cpu_altivec)
if test "x$build_cpu_altivec" = "xyes"; then
   AC_CHECK_HEADER(altivec.h,
     [
        AC_DEFINE(BUILD_ALTIVEC, 1, [Build Altivec Code])
        AC_DEFINE(HAVE_ALTIVEC_H, 1, [Have altivec.h header file])
        build_cpu_altivec="yes"
     ],
     [
       save_CFLAGS=$CFLAGS
       save_CPPFLAGS=$CPPFLAGS
       CFLAGS=$CFLAGS" -maltivec"
       CPPFLAGS=$CPPFLAGS" -maltivec"
       unset ac_cv_header_altivec_h
       AC_CHECK_HEADER(altivec.h,
         [
            AC_DEFINE(BUILD_ALTIVEC, 1, [Build Altivec Code])
            AC_DEFINE(HAVE_ALTIVEC_H, 1, [Have altivec.h header file])
            build_cpu_altivec="yes"
         ],
         [
            build_cpu_altivec="no"
         ]
       )
       CFLAGS=$save_CFLAGS
       CPPFLAGS=$save_CPPFLAGS
     ]
   )
fi
if test "x$build_cpu_altivec" = "xyes"; then
   AC_MSG_CHECKING(whether to use altivec compiler flag)
   if test x"$GCC" = x"yes"; then
      if echo "int main(){return 0;}" | ${CPP} -faltivec - > /dev/null 2>&1; then
         altivec_cflags="-faltivec"
         AC_DEFINE(BUILD_ALTIVEC, 1, [Build Altivec Code])
      elif echo "int main(){return 0;}" | ${CPP} -maltivec - > /dev/null 2>&1; then
         altivec_cflags="-maltivec"
         AC_DEFINE(BUILD_ALTIVEC, 1, [Build Altivec Code])
      fi
   fi
   AC_MSG_RESULT($altivec_cflags)
   CFLAGS="$CFLAGS $altivec_cflags"
fi


#######################################
## C
build_cpu_c="no"
build_cpu_c="yes"
AC_MSG_CHECKING(whether to build c code)
AC_ARG_ENABLE(cpu-c, 
  [  --enable-cpu-c                  enable C code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_C, 1, [Build plain C code])
	build_cpu_c="yes"
      else
        AC_MSG_RESULT(no)
	build_cpu_c="no"
      fi
  ], [
      AC_MSG_RESULT($build_cpu_c)
      if test x"$build_cpu_c" = x"yes" ; then
        AC_DEFINE(BUILD_C, 1, [Build plain C code])
      fi
  ]
)

#####################################################################
## ARGB engine options

#######################################
## Nearest sampling scaler
scaler_sample="no"
scaler_sample="yes"
AC_MSG_CHECKING(whether to build sampling scaler)
AC_ARG_ENABLE(scale-sample, 
  [  --enable-scale-sample           enable sampling scaler code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_SCALE_SAMPLE, 1, [Sampling Scaler Support])
        scaler_sample="yes"
      else
        AC_MSG_RESULT(no)
        scaler_sample="no"
      fi
  ], [
      AC_MSG_RESULT($scaler_sample)
      if test x"$scaler_sample" = x"yes" ; then
        AC_DEFINE(BUILD_SCALE_SAMPLE, 1, [Sampling Scaler Support])
      fi
  ]
)

#######################################
## Smooth super and sub sampling scaler
scaler_smooth="no"
scaler_smooth="yes"
AC_MSG_CHECKING(whether to build smooth scaler)
AC_ARG_ENABLE(scale-smooth, 
  [  --enable-scale-smooth           enable smooth scaler code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_SCALE_SMOOTH, 1, [Smooth Scaler Support])
        scaler_smooth="yes"
      else
        AC_MSG_RESULT(no)
        scaler_smooth="no"
      fi
  ], [
      AC_MSG_RESULT($scaler_smooth)
      if test x"$scaler_smooth" = x"yes" ; then
        AC_DEFINE(BUILD_SCALE_SMOOTH, 1, [Smooth Scaler Support])
      fi
  ]
)

#######################################
## YUV -> ARGB converter
conv_yuv="no"
conv_yuv="yes"
AC_MSG_CHECKING(whether to build yuv converter code)
AC_ARG_ENABLE(convert-yuv, 
  [  --enable-convert-yuv            enable yuv converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_YUV, 1, [YUV Converter Support])
	conv_yuv="yes"
      else
        AC_MSG_RESULT(no)
	conv_yuv="no"
      fi
  ], [
      AC_MSG_RESULT($conv_yuv)
      if test x"$conv_yuv" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_YUV, 1, [YUV Converter Support])
      fi
  ]
)

#####################################################################
## Output rendering features

#######################################
## Small dither mask instead of big one (lower quality)
conv_small_dither="no"
conv_small_dither="no"
AC_MSG_CHECKING(whether to build small dither mask code)
AC_ARG_ENABLE(small-dither-mask, 
  [  --enable-small-dither-mask      enable small dither mask code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
      	AC_DEFINE(BUILD_SMALL_DITHER_MASK, 1, [Small Dither Mask Support])
        conv_small_dither="yes"
      else
        AC_MSG_RESULT(no)
        conv_small_dither="no"
      fi
  ], [
      AC_MSG_RESULT($conv_small_dither)
      if test x"$conv_small_dither" = x"yes" ; then
        AC_DEFINE(BUILD_SMALL_DITHER_MASK, 1, [Small Dither Mask Support])
      fi
  ]
)

#######################################
## No dither mask at all for 16bpp
conv_no_dither="no"
conv_no_dither="no"
AC_MSG_CHECKING(whether to build without dither mask for 16bpp)
AC_ARG_ENABLE(no-dither-mask,
  [  --enable-no-dither-mask         enable conversion to 16bpp without dither mask], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
      	AC_DEFINE(BUILD_NO_DITHER_MASK, 1, [No Dither Mask Support])
        conv_no_dither="yes"
      else
        AC_MSG_RESULT(no)
        conv_no_dither="no"
      fi
  ], [
      AC_MSG_RESULT($conv_no_dither)
      if test x"$conv_no_dither" = x"yes" ; then
        AC_DEFINE(BUILD_NO_DITHER_MASK, 1, [No Dither Mask Support])
      fi
  ]
)

#######################################
## Convert to 8bpp RGB 332
conv_8_rgb_332="no"
conv_8_rgb_332="yes"
AC_MSG_CHECKING(whether to build 8bpp 332 converter code)
AC_ARG_ENABLE(convert-8-rgb-332, 
  [  --enable-convert-8-rgb-332      enable 8bpp 332 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_8_RGB_332, 1, [8bpp 332 Converter Support])
        conv_8_rgb_332="yes"
      else
        AC_MSG_RESULT(no)
	conv_8_rgb_332="no"
      fi
  ], [
      AC_MSG_RESULT($conv_8_rgb_332)
      if test x"$conv_8_rgb_332" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_8_RGB_332, 1, [8bpp 332 Converter Support])
      fi
  ]
)

#######################################
## Convert to 8bpp RGB 666
conv_8_rgb_666="no"
conv_8_rgb_666="yes"
AC_MSG_CHECKING(whether to build 8bpp 666 converter code)
AC_ARG_ENABLE(convert-8-rgb-666, 
  [  --enable-convert-8-rgb-666      enable 8bpp 666 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_8_RGB_666, 1, [8bpp 666 Converter Support])
        conv_8_rgb_666="yes"
      else
        AC_MSG_RESULT(no)
	conv_8_rgb_666="no"
      fi
  ], [
      AC_MSG_RESULT($conv_8_rgb_666)
      if test x"$conv_8_rgb_666" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_8_RGB_666, 1, [8bpp 666 Converter Support])
      fi
  ]
)

#######################################
## Convert to 8bpp RGB 232
conv_8_rgb_232="no"
conv_8_rgb_232="yes"
AC_MSG_CHECKING(whether to build 8bpp 232 converter code)
AC_ARG_ENABLE(convert-8-rgb-232, 
  [  --enable-convert-8-rgb-232      enable 8bpp 232 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_8_RGB_232, 1, [8bpp 232 Converter Support])
        conv_8_rgb_232="yes"
      else
        AC_MSG_RESULT(no)
	conv_8_rgb_232="no"
      fi
  ], [
      AC_MSG_RESULT($conv_8_rgb_232)
      if test x"$conv_8_rgb_232" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_8_RGB_232, 1, [8bpp 232 Converter Support])
      fi
  ]
)

#######################################
## Convert to 8bpp RGB 222
conv_8_rgb_222="no"
conv_8_rgb_222="yes"
AC_MSG_CHECKING(whether to build 8bpp 222 converter code)
AC_ARG_ENABLE(convert-8-rgb-222, 
  [  --enable-convert-8-rgb-222      enable 8bpp 222 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_8_RGB_222, 1, [8bpp 222 Converter Support])
        conv_8_rgb_222="yes"
      else
        AC_MSG_RESULT(no)
	conv_8_rgb_222="no"
      fi
  ], [
      AC_MSG_RESULT($conv_8_rgb_222)
      if test x"$conv_8_rgb_222" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_8_RGB_222, 1, [8bpp 222 Converter Support])
      fi
  ]
)

#######################################
## Convert to 8bpp RGB 221
conv_8_rgb_221="no"
conv_8_rgb_221="yes"
AC_MSG_CHECKING(whether to build 8bpp 221 converter code)
AC_ARG_ENABLE(convert-8-rgb-221, 
  [  --enable-convert-8-rgb-221      enable 8bpp 221 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_8_RGB_221, 1, [8bpp 221 Converter Support])
        conv_8_rgb_221="yes"
      else
        AC_MSG_RESULT(no)
	conv_8_rgb_221="no"
      fi
  ], [
      AC_MSG_RESULT($conv_8_rgb_221)
      if test x"$conv_8_rgb_221" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_8_RGB_221, 1, [8bpp 221 Converter Support])
      fi
  ]
)

#######################################
## Convert to 8bpp RGB 121
conv_8_rgb_121="no"
conv_8_rgb_121="yes"
AC_MSG_CHECKING(whether to build 8bpp 121 converter code)
AC_ARG_ENABLE(convert-8-rgb-121, 
  [  --enable-convert-8-rgb-121      enable 8bpp 121 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_8_RGB_121, 1, [8bpp 121 Converter Support])
        conv_8_rgb_121="yes"
      else
        AC_MSG_RESULT(no)
	conv_8_rgb_121="no"
      fi
  ], [
      AC_MSG_RESULT($conv_8_rgb_121)
      if test x"$conv_8_rgb_121" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_8_RGB_121, 1, [8bpp 121 Converter Support])
      fi
  ]
)

#######################################
## Convert to 8bpp RGB 111
conv_8_rgb_111="no"
conv_8_rgb_111="yes"
AC_MSG_CHECKING(whether to build 8bpp 111 converter code)
AC_ARG_ENABLE(convert-8-rgb-111, 
  [  --enable-convert-8-rgb-111      enable 8bpp 111 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_8_RGB_111, 1, [8bpp 111 Converter Support])
        conv_8_rgb_111="yes"
      else
        AC_MSG_RESULT(no)
	conv_8_rgb_111="no"
      fi
  ], [
      AC_MSG_RESULT($conv_8_rgb_111)
      if test x"$conv_8_rgb_111" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_8_RGB_111, 1, [8bpp 111 Converter Support])
      fi
  ]
)

#######################################
## Convert to 16bpp RGB 565
conv_16_rgb_565="no"
conv_16_rgb_565="yes"
AC_MSG_CHECKING(whether to build 16bpp 565 rgb converter code)
AC_ARG_ENABLE(convert-16-rgb-565, 
  [  --enable-convert-16-rgb-565     enable 16bpp rgb 565 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_RGB_565, 1, [16bpp RGB 565 Converter Support])
        conv_16_rgb_565="yes"
      else
        AC_MSG_RESULT(no)
	conv_16_rgb_565="no"
      fi
  ], [
      AC_MSG_RESULT($conv_16_rgb_565)
      if test x"$conv_16_rgb_565" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_16_RGB_565, 1, [16bpp RGB 565 Converter Support])
      fi
  ]
)

#######################################
## Convert to 16bpp BGR 565
conv_16_bgr_565="no"
conv_16_bgr_565="yes"
AC_MSG_CHECKING(whether to build 16bpp 565 bgr converter code)
AC_ARG_ENABLE(convert-16-bgr-565, 
  [  --enable-convert-16-bgr-565     enable 16bpp bgr 565 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_BGR_565, 1, [16bpp BGR 565 Converter Support])
        conv_16_bgr_565="yes"
      else
        AC_MSG_RESULT(no)
	conv_16_bgr_565="no"
      fi
  ], [
      AC_MSG_RESULT($conv_16_bgr_565)
      if test x"$conv_16_bgr_565" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_16_BGR_565, 1, [16bpp BGR 565 Converter Support])
      fi
  ]
)

#######################################
## Convert to 16bpp RGB 555
conv_16_rgb_555="no"
conv_16_rgb_555="yes"
AC_MSG_CHECKING(whether to build 16bpp 555 converter code)
AC_ARG_ENABLE(convert-16-rgb-555, 
  [  --enable-convert-16-rgb-555     enable 16bpp 555 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_RGB_555, 1, [16bpp 555 Converter Support])
        conv_16_rgb_555="yes"
      else
        AC_MSG_RESULT(no)
	conv_16_rgb_555="no"
      fi
  ], [
      AC_MSG_RESULT($conv_16_rgb_555)
      if test x"$conv_16_rgb_555" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_16_RGB_555, 1, [16bpp 555 Converter Support])
      fi
  ]
)

#######################################
## Convert to 16bpp RGB 444
conv_16_rgb_444="no"
conv_16_rgb_444="yes"
AC_MSG_CHECKING(whether to build 16bpp 444 converter code)
AC_ARG_ENABLE(convert-16-rgb-444, 
  [  --enable-convert-16-rgb-444     enable 16bpp 444 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_RGB_444, 1, [16bpp 444 Converter Support])
        conv_16_rgb_444="yes"
      else
        AC_MSG_RESULT(no)
	conv_16_rgb_444="no"
      fi
  ], [
      AC_MSG_RESULT($conv_16_rgb_444)
      if test x"$conv_16_rgb_444" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_16_RGB_444, 1, [16bpp 444 Converter Support])
      fi
  ]
)

#######################################
## Convert to 16bpp RGB 565 (444 ipaq)
conv_16_rgb_ipq="no"
conv_16_rgb_ipq="yes"
AC_MSG_CHECKING(whether to build 16bpp 565 (444 ipaq) converter code)
AC_ARG_ENABLE(convert-16-rgb-ipq, 
  [  --enable-convert-16-rgb-ipq     enable 16bpp 565 (444 ipaq) converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_RGB_454645, 1, [16bpp 565 (444 ipaq) Converter Support])
        conv_16_rgb_ipq="yes"
      else
        AC_MSG_RESULT(no)
	conv_16_rgb_ipq="no"
      fi
  ], [
      AC_MSG_RESULT($conv_16_rgb_ipq)
      if test x"$conv_16_rgb_ipq" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_16_RGB_454645, 1, [16bpp 565 (444 ipaq) Converter Support])
      fi
  ]
)

#######################################
## Convert to 16bpp RGB with rotation of 0
conv_16_rgb_rot_0="no"
conv_16_rgb_rot_0="yes"
AC_MSG_CHECKING(whether to build 16bpp rotation 0 converter code)
AC_ARG_ENABLE(convert-16-rgb-rot-0, 
  [  --enable-convert-16-rgb-rot-0   enable 16bpp rotation 0 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_RGB_ROT0, 1, [16bpp Rotation 0 Converter Code])
	conv_16_rgb_rot_0="yes"
      else
        AC_MSG_RESULT(no)
	conv_16_rgb_rot_0="no"
      fi
  ], [
      AC_MSG_RESULT($conv_16_rgb_rot_0)
      if test x"$conv_16_rgb_rot_0" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_16_RGB_ROT0, 1, [16bpp Rotation 0 Converter Code])
      fi
  ]
)

#######################################
## Convert to 16bpp RGB with rotation of 180
conv_16_rgb_rot_180="no"
conv_16_rgb_rot_180="yes"
AC_MSG_CHECKING(whether to build 16bpp rotation 180 converter code)
AC_ARG_ENABLE(convert-16-rgb-rot-180,
  [  --enable-convert-16-rgb-rot-180 enable 16bpp rotation 180 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_RGB_ROT180, 1, [16bpp Rotation 180 Converter Code])
        conv_16_rgb_rot_180="yes"
      else
        AC_MSG_RESULT(no)
        conv_16_rgb_rot_180="no"
      fi
  ], [
      AC_MSG_RESULT($conv_16_rgb_rot_180)
      if test x"$conv_16_rgb_rot_180" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_16_RGB_ROT180, 1, [16bpp Rotation 180 Converter Code])
      fi
  ]
)

#######################################
## Convert to 16bpp RGB with rotation of 270
conv_16_rgb_rot_270="no"
conv_16_rgb_rot_270="yes"
AC_MSG_CHECKING(whether to build 16bpp rotation 270 converter code)
AC_ARG_ENABLE(convert-16-rgb-rot-270, 
  [  --enable-convert-16-rgb-rot-270 enable 16bpp rotation 270 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_RGB_ROT270, 1, [16bpp Rotation 270 Converter Code])
	conv_16_rgb_rot_270="yes"
      else
        AC_MSG_RESULT(no)
	conv_16_rgb_rot_270="no"
      fi
  ], [
      AC_MSG_RESULT($conv_16_rgb_rot_270)
      if test x"$conv_16_rgb_rot_270" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_16_RGB_ROT270, 1, [16bpp Rotation 270 Converter Code])
      fi
  ]
)

#######################################
## Convert to 16bpp RGB with rotation of 90
conv_16_rgb_rot_90="no"
conv_16_rgb_rot_90="yes"
AC_MSG_CHECKING(whether to build 16bpp rotation 90 converter code)
AC_ARG_ENABLE(convert-16-rgb-rot-90, 
  [  --enable-convert-16-rgb-rot-90  enable 16bpp rotation 90 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_RGB_ROT90, 1, [16bpp Rotation 90 Converter Code])
	conv_16_rgb_rot_90="yes"
      else
        AC_MSG_RESULT(no)
	conv_16_rgb_rot_90="no"
      fi
  ], [
      AC_MSG_RESULT($conv_16_rgb_rot_90)
      if test x"$conv_16_rgb_rot_90" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_16_RGB_ROT90, 1, [16bpp Rotation 90 Converter Code])
      fi
  ]
)

#######################################
## Convert to 24bpp RGB 888
conv_24_rgb_888="no"
conv_24_rgb_888="yes"
AC_MSG_CHECKING(whether to build 24bpp 888 rgb converter code)
AC_ARG_ENABLE(convert-24-rgb-888, 
  [  --enable-convert-24-rgb-888     enable 24bpp rgb 888 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_24_RGB_888, 1, [24bpp RGB 888 Converter Support])
	conv_24_rgb_888="yes"
      else
        AC_MSG_RESULT(no)
	conv_24_rgb_888="no"
      fi
  ], [
      AC_MSG_RESULT($conv_24_rgb_888)
      if test x"$conv_24_rgb_888" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_24_RGB_888, 1, [24bpp RGB 888 Converter Support])
      fi
  ]
)

#######################################
## Convert to 24bpp BGR 888
conv_24_bgr_888="no"
conv_24_bgr_888="yes"
AC_MSG_CHECKING(whether to build 24bpp 888 bgr converter code)
AC_ARG_ENABLE(convert-24-bgr-888, 
  [  --enable-convert-24-bgr-888     enable 24bpp bgr 888 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_24_BGR_888, 1, [24bpp BGR 888 Converter Support])
	conv_24_bgr_888="yes"
      else
        AC_MSG_RESULT(no)
	conv_24_bgr_888="no"
      fi
  ], [
      AC_MSG_RESULT(yes)
      if test x"$conv_24_bgr_888" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_24_BGR_888, 1, [24bpp BGR 888 Converter Support])
      fi
  ]
)

#######################################
## Convert to 32bpp RGB 8888
conv_32_rgb_8888="no"
conv_32_rgb_8888="yes"
AC_MSG_CHECKING(whether to build 32bpp 8888 rgb converter code)
AC_ARG_ENABLE(convert-32-rgb-8888, 
  [  --enable-convert-32-rgb-8888    enable 32bpp rgb 8888 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_32_RGB_8888, 1, [32bpp RGB 8888 Converter Support])
	conv_32_rgb_8888="yes"
      else
        AC_MSG_RESULT(no)
	conv_32_rgb_8888="no"
      fi
  ], [
      AC_MSG_RESULT($conv_32_rgb_8888)
      if test x"$conv_32_rgb_8888" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_32_RGB_8888, 1, [32bpp RGB 8888 Converter Support])
      fi
  ]
)

#######################################
## Convert to 32bpp RGBX 8888
conv_32_rgbx_8888="no"
conv_32_rgbx_8888="yes"
AC_MSG_CHECKING(whether to build 32bpp 8888 rgbx converter code)
AC_ARG_ENABLE(convert-32-rgbx-8888, 
  [  --enable-convert-32-rgbx-8888   enable 32bpp rgbx 8888 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_32_RGBX_8888, 1, [32bpp RGBX 8888 Converter Support])
	conv_32_rgbx_8888="yes"
      else
        AC_MSG_RESULT(no)
	conv_32_rgbx_8888="no"
      fi
  ], [
      AC_MSG_RESULT($conv_32_rgbx_8888)
      if test x"$conv_32_rgbx_8888" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_32_RGBX_8888, 1, [32bpp RBGX 8888 Converter Support])
      fi
  ]
)

#######################################
## Convert to 32bpp BGR 8888
conv_32_bgr_8888="no"
conv_32_bgr_8888="yes"
AC_MSG_CHECKING(whether to build 32bpp 8888 bgr converter code)
AC_ARG_ENABLE(convert-32-bgr-8888, 
  [  --enable-convert-32-bgr-8888    enable 32bpp bgr 8888 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_32_BGR_8888, 1, [32bpp BGR 8888 Converter Support])
	conv_32_bgr_8888="yes"
      else
        AC_MSG_RESULT(no)
	conv_32_bgr_8888="no"
      fi
  ], [
      AC_MSG_RESULT($conv_32_bgr_8888)
      if test x"$conv_32_bgr_8888" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_32_BGR_8888, 1, [32bpp BGR 8888 Converter Support])
      fi
  ]
)

#######################################
## Convert to 32bpp BGRX 8888
conv_32_bgrx_8888="no"
conv_32_bgrx_8888="yes"
AC_MSG_CHECKING(whether to build 32bpp 8888 bgrx converter code)
AC_ARG_ENABLE(convert-32-bgrx-8888, 
  [  --enable-convert-32-bgrx-8888   enable 32bpp bgrx 8888 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_32_BGRX_8888, 1, [32bpp BGRX 8888 Converter Support])
	conv_32_bgrx_8888="yes"
      else
        AC_MSG_RESULT(no)
	conv_32_bgrx_8888="no"
      fi
  ], [
      AC_MSG_RESULT($conv_32_bgrx_8888)
      if test x"$conv_32_bgrx_8888" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_32_BGRX_8888, 1, [32bpp RBGX 8888 Converter Support])
      fi
  ]
)

#######################################
## Convert to 32bpp RGB with rotation of 0
conv_32_rgb_rot_0="no"
conv_32_rgb_rot_0="yes"
AC_MSG_CHECKING(whether to build 32bpp rotation 0 converter code)
AC_ARG_ENABLE(convert-32-rgb-rot-0, 
  [  --enable-convert-32-rgb-rot-0   enable 32bpp rotation 0 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_32_RGB_ROT0, 1, [32bpp Rotation 0 Converter Support])
	conv_32_rgb_rot_0="yes"
      else
        AC_MSG_RESULT(no)
	conv_32_rgb_rot_0="no"
      fi
  ], [
      AC_MSG_RESULT($conv_32_rgb_rot_0)
      if test x"$conv_32_rgb_rot_0" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_32_RGB_ROT0, 1, [32bpp Rotation 0 Converter Support])
      fi
  ]
)

#######################################
## Convert to 32bpp RGB with rotation of 180
conv_32_rgb_rot_180="no"
conv_32_rgb_rot_180="yes"
AC_MSG_CHECKING(whether to build 32bpp rotation 180 converter code)
AC_ARG_ENABLE(convert-32-rgb-rot-180,
  [  --enable-convert-32-rgb-rot-180 enable 32bpp rotation 180 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_32_RGB_ROT180, 1, [32bpp Rotation 180 Converter Support])
        conv_32_rgb_rot_180="yes"
      else
        AC_MSG_RESULT(no)
        conv_32_rgb_rot_180="no"
      fi
  ], [
      AC_MSG_RESULT($conv_32_rgb_rot_180)
      if test x"$conv_32_rgb_rot_180" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_32_RGB_ROT180, 1, [32bpp Rotation 180 Converter Support])
      fi
  ]
)

#######################################
## Convert to 32bpp RGB with rotation of 270
conv_32_rgb_rot_270="no"
conv_32_rgb_rot_270="yes"
AC_MSG_CHECKING(whether to build 32bpp rotation 270 converter code)
AC_ARG_ENABLE(convert-32-rgb-rot-270, 
  [  --enable-convert-32-rgb-rot-270 enable 32bpp rotation 270 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_32_RGB_ROT270, 1, [32bpp Rotation 270 Converter Support])
	conv_32_rgb_rot_270="yes"
      else
        AC_MSG_RESULT(no)
	conv_32_rgb_rot_270="no"
      fi
  ], [
      AC_MSG_RESULT($conv_32_rgb_rot_270)
      if test x"$conv_32_rgb_rot_270" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_32_RGB_ROT270, 1, [32bpp Rotation 270 Converter Support])
      fi
  ]
)

#######################################
## Convert to 32bpp RGB with rotation of 90
conv_32_rgb_rot_90="no"
conv_32_rgb_rot_90="yes"
AC_MSG_CHECKING(whether to build 32bpp rotation 90 converter code)
AC_ARG_ENABLE(convert-32-rgb-rot-90, 
  [  --enable-convert-32-rgb-rot-90  enable 32bpp rotation 90 converter code], [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_32_RGB_ROT90, 1, [32bpp Rotation 90 Converter Support])
	conv_32_rgb_rot_90="yes"
      else
        AC_MSG_RESULT(no)
	conv_32_rgb_rot_90="no"
      fi
  ], [
      AC_MSG_RESULT($conv_32_rgb_rot_90)
      if test x"$conv_32_rgb_rot_90" = x"yes" ; then
        AC_DEFINE(BUILD_CONVERT_32_RGB_ROT90, 1, [32bpp Rotation 90 Converter Support])
      fi
  ]
)


AC_OUTPUT([
Makefile 
src/Makefile 
src/bin/Makefile 
src/lib/Makefile 
src/lib/object/Makefile 
src/lib/data/Makefile 
src/lib/compositor/Makefile 
src/lib/compositor/blend/Makefile 
src/lib/scaler/Makefile 
src/lib/scaler/sampled/Makefile 
])

#src/lib/op/Makefile 
#src/lib/convert/Makefile 

echo "CPU Specific Extensions:"
echo "  Fallback C Code.........: $build_cpu_c"
echo "  MMX.....................: $build_cpu_mmx"
echo "  SSE.....................: $build_cpu_sse"
echo "  ALTIVEC.................: $build_cpu_altivec"
echo "  Thread Support..........: $build_pthreads"
echo
echo "ARGB Software Engine Options:"
echo "  Sampling Scaler.........: $scaler_sample"
echo "  Smooth Scaler...........: $scaler_smooth"
# FIXME: add an mxx scaler routine
echo "  YUV Converter...........: $conv_yuv"
# FIXME: add more YUV format and colorvariant support
echo
echo "ARGB Conversion Options:"
echo "  Smaller Dither Mask.....: $conv_small_dither"
echo "  No Dither Mask for 16bpp: $conv_no_dither"
echo "  8bpp RGB 332............: $conv_8_rgb_332"
echo "  8bpp RGB 666............: $conv_8_rgb_666"
echo "  8bpp RGB 232............: $conv_8_rgb_232"
echo "  8bpp RGB 222............: $conv_8_rgb_222"
echo "  8bpp RGB 221............: $conv_8_rgb_221"
echo "  8bpp RGB 121............: $conv_8_rgb_121"
echo "  8bpp RGB 111............: $conv_8_rgb_111"
# FIXME: add grayscale and B&W support
echo "  16bpp RGB 565...........: $conv_16_rgb_565"
echo "  16bpp BGR 565...........: $conv_16_bgr_565"
echo "  16bpp RGB 555...........: $conv_16_rgb_555"
echo "  16bpp RGB 444...........: $conv_16_rgb_444"
echo "  16bpp RGB 565 (444 ipaq): $conv_16_rgb_ipq"
# FIXME: add 555 (444 ipaq) support
# FIXME: add 24bpp 666 support
# FIXME: add 32bpp 666 support
# FIXME: add 30bpp support
# FIXME: add palletted support
# FIXME: add 8bpp and below rotation
echo "  16bpp Rotation 0........: $conv_16_rgb_rot_0"
echo "  16bpp Rotation 90.......: $conv_16_rgb_rot_90"
echo "  16bpp Rotation 180......: $conv_16_rgb_rot_180"
echo "  16bpp Rotation 270......: $conv_16_rgb_rot_270"
echo "  24bpp RGB 888...........: $conv_24_rgb_888"
echo "  24bpp BGR 888...........: $conv_24_bgr_888"
# FIXME: add 24bpp rotation
echo "  32bpp RGB 8888..........: $conv_32_rgb_8888"
echo "  32bpp RGBX 8888.........: $conv_32_rgbx_8888"
echo "  32bpp BGR 8888..........: $conv_32_bgr_8888"
echo "  32bpp BGRX 8888.........: $conv_32_bgrx_8888"
echo "  32bpp Rotation 0........: $conv_32_rgb_rot_0"
echo "  32bpp Rotation 90.......: $conv_32_rgb_rot_90"
echo "  32bpp Rotation 180......: $conv_32_rgb_rot_180"
echo "  32bpp Rotation 270......: $conv_32_rgb_rot_270"
echo
echo "------------------------------------------------------------------------"

